{"version":3,"file":"static/js/598.580e474a.chunk.js","mappings":"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","sources":["../node_modules/react-minimal-pie-chart/src/utils.ts","../node_modules/react-minimal-pie-chart/src/Chart/extendData.ts","../node_modules/react-minimal-pie-chart/src/Label.tsx","../node_modules/react-minimal-pie-chart/src/Chart/renderLabels.tsx","../node_modules/react-minimal-pie-chart/node_modules/svg-partial-circle/index.js","../node_modules/react-minimal-pie-chart/src/Path.tsx","../node_modules/react-minimal-pie-chart/src/Chart/renderSegments.tsx","../node_modules/react-minimal-pie-chart/src/Chart/Chart.tsx","components/Dashboard/TeaOverview.tsx"],"sourcesContent":["export function degreesToRadians(degrees: number) {\n  return (degrees * Math.PI) / 180;\n}\n\nexport function valueBetween(value: number, min: number, max: number) {\n  if (value > max) return max;\n  if (value < min) return min;\n  return value;\n}\n\nexport function extractPercentage(value: number, percentage: number) {\n  return (percentage / 100) * value;\n}\n\nexport function bisectorAngle(startAngle: number, lengthAngle: number) {\n  return startAngle + lengthAngle / 2;\n}\n\nexport function shiftVectorAlongAngle(angle: number, distance: number) {\n  const angleRadians = degreesToRadians(angle);\n  return {\n    dx: distance * Math.cos(angleRadians),\n    dy: distance * Math.sin(angleRadians),\n  };\n}\n\nexport function isNumber(value: unknown): value is number {\n  return typeof value === 'number';\n}\n\n/**\n * Conditionally return a prop or a function prop result\n */\nexport function functionProp<ReturnedProp, Payload>(\n  prop: ((args: Payload) => ReturnedProp) | ReturnedProp,\n  payload: Payload\n): ReturnedProp {\n  return typeof prop === 'function'\n    ? // @ts-expect-error: cannot find a way to type 2nd prop arg as anything-but-function\n      prop(payload)\n    : prop;\n}\n","import { extractPercentage, valueBetween } from '../utils';\nimport type { Data, BaseDataEntry, ExtendedData } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction sumValues<DataEntry extends BaseDataEntry>(\n  data: Data<DataEntry>\n): number {\n  let sum = 0;\n  for (let i = 0; i < data.length; i++) {\n    sum += data[i].value;\n  }\n  return sum;\n}\n\n// Append \"percentage\", \"degrees\" and \"startAngle\" to each data entry\nexport default function extendData<DataEntry extends BaseDataEntry>({\n  data,\n  lengthAngle: totalAngle,\n  totalValue,\n  paddingAngle,\n  startAngle: chartStartAngle,\n}: ChartProps<DataEntry>): ExtendedData<DataEntry> {\n  const total = totalValue || sumValues(data);\n  const normalizedTotalAngle = valueBetween(totalAngle, -360, 360);\n  const numberOfPaddings =\n    Math.abs(normalizedTotalAngle) === 360 ? data.length : data.length - 1;\n  const singlePaddingDegrees = Math.abs(paddingAngle) * Math.sign(totalAngle);\n  const degreesTakenByPadding = singlePaddingDegrees * numberOfPaddings;\n  const degreesTakenByPaths = normalizedTotalAngle - degreesTakenByPadding;\n  let lastSegmentEnd = 0;\n  const extendedData: ExtendedData<DataEntry> = [];\n\n  // @NOTE: Shall we evaluate percentage accordingly to dataEntry.value's sign?\n  for (let i = 0; i < data.length; i++) {\n    const dataEntry = data[i];\n    const valueInPercentage = total === 0 ? 0 : (dataEntry.value / total) * 100;\n    const degrees = extractPercentage(degreesTakenByPaths, valueInPercentage);\n    const startAngle = lastSegmentEnd + chartStartAngle;\n    lastSegmentEnd = lastSegmentEnd + degrees + singlePaddingDegrees;\n    extendedData.push(\n      Object.assign(\n        {\n          percentage: valueInPercentage,\n          startAngle,\n          degrees,\n        },\n        dataEntry\n      )\n    );\n  }\n  return extendedData;\n}\n","import React from 'react';\nimport type { CSSProperties, SVGProps } from 'react';\nimport type {\n  ExtendedData,\n  BaseDataEntry,\n  LabelRenderFunction,\n} from './commonTypes';\n\nexport type LabelRenderProps<DataEntry extends BaseDataEntry> = {\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  textAnchor: string;\n  dataEntry: ExtendedData<DataEntry>[number];\n  dataIndex: number;\n  style?: CSSProperties;\n};\n\nexport default function ReactMinimalPieChartLabel<\n  DataEntry extends BaseDataEntry,\n>({\n  renderLabel,\n  labelProps,\n}: {\n  renderLabel: LabelRenderFunction<DataEntry>;\n  labelProps: LabelRenderProps<DataEntry>;\n}) {\n  const label = renderLabel(labelProps);\n\n  // Default label\n  if (typeof label === 'string' || typeof label === 'number') {\n    const { dataEntry, dataIndex, ...props } = labelProps;\n    return (\n      <text dominantBaseline=\"central\" {...props}>\n        {label}\n      </text>\n    );\n  }\n\n  if (React.isValidElement(label)) {\n    return label;\n  }\n\n  return null;\n}\n","import React from 'react';\nimport Label from '../Label';\nimport {\n  bisectorAngle,\n  extractPercentage,\n  functionProp,\n  shiftVectorAlongAngle,\n} from '../utils';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\nimport type { LabelRenderProps } from '../Label';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\n\nfunction round(number: number): number {\n  const divisor = 1e14; // 14 decimals\n  return Math.round((number + Number.EPSILON) * divisor) / divisor;\n}\n\nfunction evaluateTextAnchorPosition({\n  labelPosition,\n  lineWidth,\n  labelHorizontalShift,\n}: {\n  labelPosition: number;\n  lineWidth: number;\n  labelHorizontalShift: number;\n}) {\n  const dx = round(labelHorizontalShift);\n  // Label in the vertical center\n  if (dx === 0) {\n    return 'middle';\n  }\n  // Outward label\n  if (labelPosition > 100) {\n    return dx > 0 ? 'start' : 'end';\n  }\n  // Inward label\n  const innerRadius = 100 - lineWidth;\n  if (labelPosition < innerRadius) {\n    return dx > 0 ? 'end' : 'start';\n  }\n  // Overlying label\n  return 'middle';\n}\n\nfunction makeLabelRenderProps<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n): LabelRenderProps<DataEntry>[] {\n  return data.map((dataEntry, index) => {\n    const segmentsShift = functionProp(props.segmentsShift, index) ?? 0;\n    const distanceFromCenter =\n      extractPercentage(props.radius, props.labelPosition) + segmentsShift;\n    const { dx, dy } = shiftVectorAlongAngle(\n      bisectorAngle(dataEntry.startAngle, dataEntry.degrees),\n      distanceFromCenter\n    );\n\n    // This object is passed as argument to the \"label\" function prop\n    const labelRenderProps: LabelRenderProps<DataEntry> = {\n      x: props.center[0],\n      y: props.center[1],\n      dx,\n      dy,\n      textAnchor: evaluateTextAnchorPosition({\n        labelPosition: props.labelPosition,\n        lineWidth: props.lineWidth,\n        labelHorizontalShift: dx,\n      }),\n      dataEntry,\n      dataIndex: index,\n      style: functionProp(props.labelStyle, index),\n    };\n\n    return labelRenderProps;\n  });\n}\n\nexport default function renderLabels<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>\n) {\n  const { label } = props;\n  if (label) {\n    return makeLabelRenderProps(data, props).map((labelRenderProps, index) => (\n      <Label\n        key={`label-${labelRenderProps.dataEntry.key || index}`}\n        renderLabel={label}\n        labelProps={labelRenderProps}\n      />\n    ));\n  }\n}\n","'use strict'\n\n// from http://stackoverflow.com/a/18473154\nconst partialCircle = (cx, cy, r, start, end) => {\n\tconst length = end - start\n\tif (length === 0) return []\n\n\tconst fromX = r * Math.cos(start) + cx\n\tconst fromY = r * Math.sin(start) + cy\n\tconst toX = r * Math.cos(end) + cx\n\tconst toY = r * Math.sin(end) + cy\n\tconst large = Math.abs(length) <= Math.PI ? '0' : '1'\n\tconst sweep = length < 0 ? '0' : '1'\n\n\treturn [\n\t\t['M', fromX, fromY],\n\t\t['A', r, r, 0, large, sweep, toX, toY]\n\t]\n}\n\nmodule.exports = partialCircle\n","import React from 'react';\nimport type { SVGProps } from 'react';\nimport partialCircle from 'svg-partial-circle';\nimport {\n  bisectorAngle,\n  degreesToRadians,\n  extractPercentage,\n  isNumber,\n  shiftVectorAlongAngle,\n  valueBetween,\n} from './utils';\n\nexport function makePathCommands(\n  cx: number,\n  cy: number,\n  startAngle: number,\n  lengthAngle: number,\n  radius: number\n): string {\n  const patchedLengthAngle = valueBetween(lengthAngle, -359.999, 359.999);\n\n  return partialCircle(\n    cx,\n    cy, // center X and Y\n    radius,\n    degreesToRadians(startAngle),\n    degreesToRadians(startAngle + patchedLengthAngle)\n  )\n    .map((command) => command.join(' '))\n    .join(' ');\n}\n\ntype Props = SVGProps<SVGPathElement> & {\n  cx: number;\n  cy: number;\n  lengthAngle: number;\n  lineWidth: number;\n  radius: number;\n  reveal?: number;\n  rounded?: boolean;\n  shift?: number;\n  startAngle: number;\n  title?: string | number;\n};\n\nexport default function ReactMinimalPieChartPath({\n  cx,\n  cy,\n  lengthAngle,\n  lineWidth,\n  radius,\n  shift = 0,\n  reveal,\n  rounded,\n  startAngle,\n  title,\n  ...props\n}: Props) {\n  const pathRadius = radius - lineWidth / 2;\n  //@NOTE This shift might be rendered as a translation in future\n  const { dx, dy } = shiftVectorAlongAngle(\n    bisectorAngle(startAngle, lengthAngle),\n    shift\n  );\n\n  const pathCommands = makePathCommands(\n    cx + dx,\n    cy + dy,\n    startAngle,\n    lengthAngle,\n    pathRadius\n  );\n  let strokeDasharray;\n  let strokeDashoffset;\n\n  // Animate/hide paths with \"stroke-dasharray\" + \"stroke-dashoffset\"\n  // https://css-tricks.com/svg-line-animation-works/\n  if (isNumber(reveal)) {\n    const pathLength = degreesToRadians(pathRadius) * lengthAngle;\n    strokeDasharray = Math.abs(pathLength);\n    strokeDashoffset =\n      strokeDasharray - extractPercentage(strokeDasharray, reveal);\n  }\n\n  return (\n    <path\n      d={pathCommands}\n      fill=\"none\"\n      strokeWidth={lineWidth}\n      strokeDasharray={strokeDasharray}\n      strokeDashoffset={strokeDashoffset}\n      strokeLinecap={rounded ? 'round' : undefined}\n      {...props}\n    >\n      {title && <title>{title}</title>}\n    </path>\n  );\n}\n","import React from 'react';\nimport type { CSSProperties, SyntheticEvent } from 'react';\nimport Path from '../Path';\nimport { extractPercentage, functionProp, isNumber } from '../utils';\nimport type { ExtendedData, BaseDataEntry } from '../commonTypes';\nimport type { PropsWithDefaults as ChartProps } from './Chart';\n\nfunction combineSegmentTransitionsStyle(\n  duration: number,\n  easing: string,\n  customStyle?: CSSProperties\n): { transition: string } {\n  // Merge chart's animation CSS transition with \"transition\" found to customStyle\n  let transition = `stroke-dashoffset ${duration}ms ${easing}`;\n  if (customStyle && customStyle.transition) {\n    transition = `${transition},${customStyle.transition}`;\n  }\n  return {\n    transition,\n  };\n}\n\nfunction getRevealValue({\n  reveal,\n  animate,\n}: Pick<ChartProps, 'reveal' | 'animate'>) {\n  //@NOTE When animation is on, chart has to be fully revealed when reveal is not set\n  if (animate && !isNumber(reveal)) {\n    return 100;\n  }\n  return reveal;\n}\n\nfunction makeEventHandler<\n  Event extends SyntheticEvent,\n  Payload,\n  EventHandler extends (event: Event, payload: Payload) => void,\n>(eventHandler: undefined | EventHandler, payload: Payload) {\n  return (\n    eventHandler &&\n    ((e: Event) => {\n      eventHandler(e, payload);\n    })\n  );\n}\n\nexport default function renderSegments<DataEntry extends BaseDataEntry>(\n  data: ExtendedData<DataEntry>,\n  props: ChartProps<DataEntry>,\n  revealOverride?: null | number\n) {\n  // @NOTE this should go in Path component. Here for performance reasons\n  const reveal = revealOverride ?? getRevealValue(props);\n  const {\n    radius,\n    center: [cx, cy],\n  } = props;\n  const lineWidth = extractPercentage(radius, props.lineWidth);\n  const paths = data.map((dataEntry, index) => {\n    const segmentsStyle = functionProp(props.segmentsStyle, index);\n    return (\n      <Path\n        cx={cx}\n        cy={cy}\n        key={dataEntry.key || index}\n        lengthAngle={dataEntry.degrees}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        reveal={reveal}\n        shift={functionProp(props.segmentsShift, index)}\n        startAngle={dataEntry.startAngle}\n        title={dataEntry.title}\n        style={Object.assign(\n          {},\n          segmentsStyle,\n          props.animate &&\n            combineSegmentTransitionsStyle(\n              props.animationDuration,\n              props.animationEasing,\n              segmentsStyle\n            )\n        )}\n        stroke={dataEntry.color}\n        tabIndex={props.segmentsTabIndex}\n        onBlur={makeEventHandler(props.onBlur, index)}\n        onClick={makeEventHandler(props.onClick, index)}\n        onFocus={makeEventHandler(props.onFocus, index)}\n        onKeyDown={makeEventHandler(props.onKeyDown, index)}\n        onMouseOver={makeEventHandler(props.onMouseOver, index)}\n        onMouseOut={makeEventHandler(props.onMouseOut, index)}\n      />\n    );\n  });\n\n  if (props.background) {\n    paths.unshift(\n      <Path\n        cx={cx}\n        cy={cy}\n        key=\"bg\"\n        lengthAngle={props.lengthAngle}\n        lineWidth={lineWidth}\n        radius={radius}\n        rounded={props.rounded}\n        startAngle={props.startAngle}\n        stroke={props.background}\n      />\n    );\n  }\n\n  return paths;\n}\n","import React, { useState, useEffect } from 'react';\nimport type {\n  CSSProperties,\n  FocusEvent,\n  KeyboardEvent,\n  MouseEvent,\n  ReactNode,\n} from 'react';\nimport extendData from './extendData';\nimport renderLabels from './renderLabels';\nimport renderSegments from './renderSegments';\nimport type { Data, BaseDataEntry, LabelRenderFunction } from '../commonTypes';\n\nexport type Props<DataEntry extends BaseDataEntry = BaseDataEntry> = {\n  animate?: boolean;\n  animationDuration?: number;\n  animationEasing?: string;\n  background?: string;\n  center?: [number, number];\n  children?: ReactNode;\n  className?: string;\n  data: Data<DataEntry>;\n  lengthAngle?: number;\n  lineWidth?: number;\n  label?: LabelRenderFunction<DataEntry>;\n  labelPosition?: number;\n  labelStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  onBlur?: (event: FocusEvent, dataIndex: number) => void;\n  onClick?: (event: MouseEvent, dataIndex: number) => void;\n  onFocus?: (event: FocusEvent, dataIndex: number) => void;\n  onKeyDown?: (event: KeyboardEvent, dataIndex: number) => void;\n  onMouseOut?: (event: MouseEvent, dataIndex: number) => void;\n  onMouseOver?: (event: MouseEvent, dataIndex: number) => void;\n  paddingAngle?: number;\n  radius?: number;\n  reveal?: number;\n  rounded?: boolean;\n  segmentsShift?: number | ((dataIndex: number) => number | undefined);\n  segmentsStyle?:\n    | CSSProperties\n    | ((dataIndex: number) => CSSProperties | undefined);\n  segmentsTabIndex?: number;\n  startAngle?: number;\n  style?: CSSProperties;\n  totalValue?: number;\n  viewBoxSize?: [number, number];\n};\n\nexport const defaultProps = {\n  animationDuration: 500,\n  animationEasing: 'ease-out',\n  center: [50, 50] as [number, number],\n  data: [] as Data,\n  labelPosition: 50,\n  lengthAngle: 360,\n  lineWidth: 100,\n  paddingAngle: 0,\n  radius: 50,\n  startAngle: 0,\n  viewBoxSize: [100, 100] as [number, number],\n};\n\nexport type PropsWithDefaults<DataEntry extends BaseDataEntry = BaseDataEntry> =\n  Props<DataEntry> & typeof defaultProps;\n\nfunction makePropsWithDefaults<DataEntry extends BaseDataEntry>(\n  props: Props<DataEntry>\n): PropsWithDefaults<DataEntry> {\n  const result: PropsWithDefaults<DataEntry> = Object.assign(\n    {},\n    defaultProps,\n    props\n  );\n\n  // @NOTE Object.assign doesn't default properties with undefined value (like React defaultProps does)\n  let key: keyof typeof defaultProps;\n  for (key in defaultProps) {\n    if (props[key] === undefined) {\n      // @ts-expect-error: TS cannot ensure we're assigning the expected props accross abjects\n      result[key] = defaultProps[key];\n    }\n  }\n\n  return result;\n}\n\nexport function ReactMinimalPieChart<DataEntry extends BaseDataEntry>(\n  originalProps: Props<DataEntry>\n) {\n  const props = makePropsWithDefaults(originalProps);\n  const [revealOverride, setRevealOverride] = useState(\n    props.animate ? 0 : null\n  );\n\n  useEffect(() => {\n    if (props.animate) {\n      // Trigger initial animation\n      setRevealOverride(null);\n    }\n  }, []);\n\n  const extendedData = extendData(props);\n  return (\n    <svg\n      viewBox={`0 0 ${props.viewBoxSize[0]} ${props.viewBoxSize[1]}`}\n      width=\"100%\"\n      height=\"100%\"\n      className={props.className}\n      style={props.style}\n    >\n      {renderSegments(extendedData, props, revealOverride)}\n      {renderLabels(extendedData, props)}\n      {props.children}\n    </svg>\n  );\n}\n","import React from 'react';\nimport { useTea } from '../../contexts/TeaContext';\nimport { Tea, TeaType } from '../../types/Tea';\nimport { usePreferences } from '../../contexts/PreferencesContext';\nimport { PieChart } from 'react-minimal-pie-chart';\nimport './TeaOverview.css';\n\nconst TeaOverview: React.FC = () => {\n  const { teas } = useTea();\n  const { preferences } = usePreferences();\n\n  const stats = {\n    total: teas.length,\n    lowStock: teas.filter(t => t.lowStockThreshold && t.amount <= t.lowStockThreshold).length,\n    favorites: teas.filter(t => preferences.favoriteTeaIds.includes(t.id)).length,\n    types: Object.values(TeaType).reduce((acc, type) => {\n      acc[type] = teas.filter(t => t.type === type).length;\n      return acc;\n    }, {} as Record<TeaType, number>),\n  };\n\n  const typeData = Object.entries(stats.types)\n    .filter(([_, count]) => count > 0)\n    .map(([type, count], index) => ({\n      title: type,\n      value: count,\n      color: `hsl(${index * (360 / Object.keys(stats.types).length)}, 70%, 50%)`\n    }));\n\n  return (\n    <div className=\"tea-overview\">\n      <div className=\"stats-grid\">\n        <div className=\"stat-card total\">\n          <h3>Total Teas</h3>\n          <div className=\"stat-value\">{stats.total}</div>\n        </div>\n        <div className=\"stat-card low-stock\">\n          <h3>Low Stock</h3>\n          <div className=\"stat-value\">{stats.lowStock}</div>\n        </div>\n        <div className=\"stat-card favorites\">\n          <h3>Favorites</h3>\n          <div className=\"stat-value\">{stats.favorites}</div>\n        </div>\n      </div>\n\n      <div className=\"charts-section\">\n        <div className=\"chart-container\">\n          <h3>Tea Types Distribution</h3>\n          <div className=\"chart-content\">\n            <div className=\"pie-chart\">\n              <PieChart\n                data={typeData}\n                radius={42}\n                animate\n              />\n            </div>\n            <div className=\"chart-legend\">\n              {typeData.map(({ title, value, color }) => (\n                <div key={title} className=\"legend-item\">\n                  <span className=\"color-dot\" style={{ backgroundColor: color }}/>{' '}\n                  <span className=\"legend-text\"><strong>{title}</strong>: {value}</span>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TeaOverview;\n"],"names":["degreesToRadians","degrees","Math","PI","valueBetween","value","min","max","extractPercentage","percentage","bisectorAngle","startAngle","lengthAngle","shiftVectorAlongAngle","angle","distance","angleRadians","dx","cos","dy","sin","isNumber","functionProp","prop","payload","sumValues","data","sum","i","length","extendData","_ref","totalAngle","totalValue","paddingAngle","chartStartAngle","total","normalizedTotalAngle","numberOfPaddings","abs","singlePaddingDegrees","sign","degreesTakenByPaths","lastSegmentEnd","extendedData","dataEntry","valueInPercentage","push","Object","assign","ReactMinimalPieChartLabel","renderLabel","labelProps","label","dataIndex","props","_objectWithoutPropertiesLoose","_excluded$1","React","createElement","dominantBaseline","isValidElement","round","number","divisor","Number","EPSILON","evaluateTextAnchorPosition","labelPosition","lineWidth","labelHorizontalShift","makeLabelRenderProps","map","index","_functionProp","segmentsShift","distanceFromCenter","radius","_shiftVectorAlongAngl","x","center","y","textAnchor","style","labelStyle","renderLabels","labelRenderProps","key","svgPartialCircle","cx","cy","r","start","end","fromX","fromY","toX","toY","makePathCommands","patchedLengthAngle","partialCircle","command","join","ReactMinimalPieChartPath","strokeDasharray","strokeDashoffset","_ref$shift","shift","reveal","rounded","title","_excluded","pathRadius","pathCommands","pathLength","d","fill","strokeWidth","strokeLinecap","undefined","combineSegmentTransitionsStyle","duration","easing","customStyle","transition","getRevealValue","animate","makeEventHandler","eventHandler","e","renderSegments","revealOverride","_props$center","paths","segmentsStyle","animationDuration","animationEasing","stroke","color","tabIndex","segmentsTabIndex","onBlur","onClick","onFocus","onKeyDown","onMouseOver","onMouseOut","background","unshift","defaultProps","viewBoxSize","makePropsWithDefaults","result","ReactMinimalPieChart","originalProps","_useState","useState","setRevealOverride","useEffect","viewBox","width","height","className","children","TeaOverview","teas","useTea","preferences","usePreferences","stats","lowStock","filter","t","lowStockThreshold","amount","favorites","favoriteTeaIds","includes","id","types","values","TeaType","reduce","acc","type","typeData","entries","_","count","_ref2","keys","_jsxs","_jsx","PieChart","_ref3","backgroundColor"],"sourceRoot":""}